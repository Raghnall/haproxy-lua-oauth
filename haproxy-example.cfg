global
    daemon
    lua-load /usr/local/share/lua/5.3/jwtverify.lua

    # Set env variables used by Lua file...

    # OAuth audience - can specify mutiple with space seperated list
    # Leave diabled to skip audience validation
    setenv OAUTH_AUDIENCE "https://api.mywebsite.com https://www.mywebsite.com"

    # Default RS256 Public Key certificate PEM with the "-----BEGIN PUBLIC KEY-----" and "-----END PUBLIC KEY-----" removed
    setenv OAUTH_PUBKEY "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAynCkqtfYBy85hk73+XMSZIjn4JsnSPaXYf7NdSPhMZpqrVGpPkksEnh82jK3+Fun+9SN0t9q5NP2daKiveQMa/nod3yNcCjRcvR+VE0CCgSegXsz0bW2eINzUGJQOdEMWqon7mX7pbnsamRETYZnqKwyTeNcOyNkpWwKFPgh7/8E0YlEHGucK86XAirzd0aAWl6SByK6otKwe2XvSnuNAJ3JsfzI39U4Hc3InLXTbw9SNPaGtvER0vwZaRXHWU2a9GBewbJiWY8V9wW1T85FfEW//XpM3BwL/OM60DuJTr/9WG+0OVgb7OoDnWzKy2wVndQEsiGm31N1vE5w2BDTtQIDAQAB"

    # Default HS256 HMAC secret key
    # setenv OAUTH_HMAC_SECRET E57lT71DHOHK1eeOlMjatvUtUg6ejFZ8

    # Default OAuth issuer (leave commented out to disable issuer validation)
    setenv OAUTH_ISSUER https://youraccount.auth0.com/

    # Multiple issuers, space seperated
    setenv OAUTH_ISSUERS "https://accounts.google.com https://dev-jlvdi8sg.us.auth0.com/"
    
    # https://accounts.google.com (Google has mutiple keys, so set the key ids here)
    # You should be able to locate the keys from the "jwts_uri" found in the Discovery document
    # Discovery document: https://accounts.google.com/.well-known/openid-configuration
    # jwks_uri: https://www.googleapis.com/oauth2/v3/certs
    # If you need to go from a N & E you can use: https://8gwifi.org/jwkconvertfunctions.jsp
    # ISS: https://accounts.google.com (#1 in the OAUTH_ISSUERS list)
    setenv OAUTH_PUBKEYS_1 "85828c59284a69b54b27483e487c3bd46cd2a2b3 27c72619d0935a290c41c3f010167138685f7e53"
    # ISS: https://accounts.google.com KID: 85828c59284a69b54b27483e487c3bd46cd2a2b3 (#1 in the OAUTH_PUBKEYS_1 list)
    setenv OAUTH_PUBKEYS_1_1 "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzMHxWuxztMKXdBhv3rImlUvW/yp6nO03cVXPyA0Vyq0+M7LfOJJIF+OdNoRGdsFPHVKCFoo6qGhR8rBCmMxA4fM+Ubk5qKuUqCN9eP3yZJq8Cw9tUrt/qh7uW+qfMr0upcyeSHhC/zW1lTGs5sowDorKN/jQ1Sfh9hfBxfc8T7dQAAgEqqMcE3u+2J701jyhJz0pvurCfziiB3buY6SGREhBQwNwpnQjt/lE2U4km8FS0woPzt0ccE3zsGL2qM+LWZbOm9aXquSnqNJLt3tGVvShnev+GiJ1XfQ3EWm0f4w0TX9fTOkxstl0vo/vW/FjGQ0D1pXSjqb7n+hAdXwc9wIDAQAB"
    # ISS: https://accounts.google.com KID: 27c72619d0935a290c41c3f010167138685f7e53 (#2 in the OAUTH_PUBKEYS_1 list)
    setenv OAUTH_PUBKEYS_1_2 "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqYuQSAy/tAOFdyAO9Dlf9Ky3wnjrW+a+Qk95Bb0AG2GrQ1+KVADlRmRIe/36bs7QPmfpQ41dVYPmNSI7dTLty1zMjHbMz89Bb63fYm6BYMQKvUk5Ss868JdXzkgLc0qsLQ5EGljPolJpii9h2YrrWkHa4DX6sGfS/i1/bSTqRlYyFMICido85SKIbvyVaedX2uFc3KlawsORjbUzxRGS1Ob3ag7c6rRZV/xqSKxVtxf6xmLh1I+t5EiDh8xjaE1XRUv37TzUvCvv3PM1phmDqG/J0QJMqE2J6SNPdva2SqZGNA9D+l2iW2SPU7BToVgAFjv9vrAxjeWAvZh48txptwIDAQAB"

    # ISS: https://dev-jlvdi8sg.us.auth0.com/ (#2 in the OAUTH_ISSUERS list)
    setenv OAUTH_PUBKEYS_2 "YeWQ2UJeZ10dQuOnZE3C8 LUtkeFS3-lzYKHz576pZk"
    # ISS: https://dev-jlvdi8sg.us.auth0.com/ KID: YeWQ2UJeZ10dQuOnZE3C8 (#1 in the OAUTH_PUBKEYS_2 list)
    setenv OAUTH_PUBKEYS_2_1 "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAynCkqtfYBy85hk73+XMSZIjn4JsnSPaXYf7NdSPhMZpqrVGpPkksEnh82jK3+Fun+9SN0t9q5NP2daKiveQMa/nod3yNcCjRcvR+VE0CCgSegXsz0bW2eINzUGJQOdEMWqon7mX7pbnsamRETYZnqKwyTeNcOyNkpWwKFPgh7/8E0YlEHGucK86XAirzd0aAWl6SByK6otKwe2XvSnuNAJ3JsfzI39U4Hc3InLXTbw9SNPaGtvER0vwZaRXHWU2a9GBewbJiWY8V9wW1T85FfEW//XpM3BwL/OM60DuJTr/9WG+0OVgb7OoDnWzKy2wVndQEsiGm31N1vE5w2BDTtQIDAQAB"
    # ISS: https://dev-jlvdi8sg.us.auth0.com/ KID: LUtkeFS3-lzYKHz576pZk (#2 in the OAUTH_PUBKEYS_2 list)
    setenv OAUTH_PUBKEYS_2_2 "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6iBjL6W+SN+8Au7W+0K8TnADfg+u0U8FoJLxfN/sKMoiaF9ILz25GAIIN91AhaNMSsrVCZp3uItUsLMImDCvvQcVTk96gOch5l4tQdZpdpKIBDN1PRd1I4/AH99uupsYdq6JWzDbgxGZcw7AnUBU/YtHlWg5QEmfaXXOZ5Qbape6WR9KArV2+UfXjLxgGybXKC3Y6vZoPoJ8V0ddKYj9bwiLroJcxKqjYy5s+EpKX8pTUwtn3iHZhnjY2w5tnYIhbfGKm8hZgoc3mYd4uLF21oxCdvxbVouqz/A4ulcfeTnbvzbT11AqWIxnrN1pdk4+xu5X0AJYR12Se34lKIKScwIDAQAB"

defaults
    timeout connect 5s
    timeout client  5s
    timeout server  5s
    mode http
 
frontend api_gateway
    # Good practice to secure communication when passing tokens
    # bind :443 ssl crt /etc/haproxy/pem/test.com.pem alpn h2,http1.1
    bind :80

    # Deny if no Authorization header sent
    http-request deny unless { req.hdr(authorization) -m found }

    # Invoke the jwtverify Lua file
    http-request lua.jwtverify

    # Deny unless jwtverify set 'authorized' to true
    http-request deny unless { var(txn.authorized) -m bool }

    # OPTIONAL: Deny if GET request, but JWT does not contain 'read:myservice' scope
    http-request deny if { path_beg /api/myservice } { method GET } ! { var(txn.oauth_scopes) -m sub read:myservice }

    # OPTIONAL: Deny if POST, PUT, or DELETE request, but JWT does not contain 'write:myservice' scope
    http-request deny if { path_beg /api/myservice } { method POST PUT DELETE } ! { var(txn.oauth_scopes) -m sub write:myservice }

    default_backend apiservers

backend apiservers
    balance roundrobin
    server server1 127.0.0.1:8080